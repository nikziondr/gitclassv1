import random #Random is a built-in module in Python used to create random numbers. We used to the import statement to 'call it' and use it in the function we called accountNumber()
database = {} #this is a dictionary (you can tell by the {}) I created at the beginning to have it availabe to all functions at once. It'll save the acct# as the key then first/last name, email and password as values tied to the key
userDetails = [] #Empty list used to save user personal details for easier access later by their index numbers

def init(): #First function, will ask user if they have an acct and if it'll take them to the register() function to create one
    isOptionSelectedValid = False
    print('Welcome to Bank PHP')
    while isOptionSelectedValid == False: #While Loop to ensure that if they don't enter either 1 or 2 it'll continue to ask until they do. We created a variable named isOptionSelectedValid to hold the Boolean value of 'False' and then when either 1 or 2 were selected the code turns it into True so the code doesn't loop
        haveAccount = int(input('Do you have an account with us?: Type 1 for Yes, or 2 No \n'))
        if(haveAccount == 1):
            isOptionSelectedValid = True
            login()
        elif(haveAccount == 2):
            isOptionSelectedValid = True
            register()
        else:
            print('You have selected an invalid option, please try again')

def register(): #This function will handle creating and saving user details for a new account
    global email, first_name, last_name, password, accountNumber #Used the built-in 'Global' keyword here to make the 4 variables I created right after available outside of this function, otherwise they wouldn't be 'seen' by the other functions. Could've maybe just called them at the very top outside a function also.
    print('***Answer the following prompts to register with us:***')
    email = input('What is your email address? \n')
    first_name = input('What is your first name? \n')
    last_name = input('What is your last name? \n')
    password = input('Create a password for yourself \n')

    userDetails.extend((email, first_name, last_name, password)) # using the extend method for lists to add the variables inside the () into our empty userDetails list
    accountNumber = generateAccountNumber() # assigns the random number generated by the generateAccountNumber() function to this variable so we can then save it onto the database dictionary as the key

    database[accountNumber] = [first_name, last_name, email, password] #the acct number is the key and all other variables the values tied to it (this is a dictionary, not a list)
    print('===Your account has been created!===')
    print('***Your account number is ' + str(accountNumber) + '*** \n') #Displaying the acct number the generateAccountNumber() function created so they can write it down
    login() #After the register functions runs successfully we can call the login() fuction so the user can login with their new info

def login(): #Handles the actual login by checking to see if the acct # and password they enter matches what is saved in the accountNumber and userDetails variables
    while True: #While Loop to ensure that if they don't enter either 1 or 2 it'll continue to ask until they do. Instead of creating a variable like in line 6, we just opted to use the True value by itself and when a wrong option was selected we use the 'Continue' statement to loop back to the top of the While loop. Either way works, this way is less code.
        accountNumberEntered = int(input('What is your account number? \n')) #We're saving the acct # the user enters to a variable so we can compare it to the number saved in the database dictionary to see if it's found in there
        passwordEntered = input('What is your password? \n')
        if accountNumberEntered == accountNumber and passwordEntered == password: #Comparing the acct # and password entered to the corresponding values saved in lines 25 and 28 when they created an acct
            bankOperations() #If the check in line 39 is successful then the user is sent to bankOperations() function next to actually do bank operations
        else:
            print('Invalid password and/or username entered, please try again')
            continue #Continue statement loops back to top of While loop to try again
       

def bankOperations(): #This function will handle the actual deposit/withdraw operations as well as give options to log out or exit program fully
    print('Welcome ' + userDetails[1] + ' ' + userDetails[2]) #Since we saved first/last/email/password to userDetails we are calling them here to display the users name as saved earlier in line 27
    while True: #Another while loop to make sure they enter the right option
        option = int(input('What would you like to do? 1.Deposit 2.Withdrawal 3.Logout 4.Exit Program\n')) #used int because in the next few lines it's comparing to integers, not strings. YOu could also make the options strings by putting '' on them and not do the int() method
        if (option == 1):
            depositOperation()
        elif(option == 2):
            withdrawalOperation()
        elif(option == 3):
            login()
        elif(option == 4):
            exit()
        else:
            print("Please select a valid option")
            continue #if wrong option, then loop back to top of While loop

def generateAccountNumber():
    return random.randrange(1111111111,9999999999) #Using the 'randrange' method built into the random module to create a random number within the range specified inside the () and then returning the value using the 'return' statement.

def depositOperation(): # Handles deposit operation when selecting Deposit in bankOperations()
    print('You selected Deposit')
    while True: #Another while loop so that it can repeat code if the user wants to redo the deposit amount by choosing option 2. in line 69
        depositAmount = int(input("Please enter the amount you'd like to deposit \n")) #Created this variable so we can remember and use the amount of the deposit the user enters
        confirmDeposit = int(input('The amount to deposit is $' + str(depositAmount) + ', is this correct? 1. Yes 2. No \n')) #had to turn depositAmount into string so that I could concatenate (join) it to the strings inside the '' like this. You can also use the %s method
        if confirmDeposit == 1:
            print('***Your deposit was successful!***')
            print('===Going back to the main menu===')
            bankOperations() #If user confirms deposit then we call bankOperations() so they can choose another operation or exit the program
        else:
            continue #if they choose option 2 (no) it loops back to line 67 where the While loop began to ask for the amount again

def withdrawalOperation(): # Handles withdrawal operation when selecting Deposit in bankOperations(). This function operates almost the same as depositOperations()
    print('You selected Withdraw')
    while True: #Same idea as While loop in line 67
        withdrawAmount = int(input("Please enter the amount you'd like to deposit \n"))
        confirmWithdrawal = int(input('The amount to withdraw is $' + str(withdrawAmount) + ', is this correct? 1. Yes 2. No \n'))
        if confirmWithdrawal == 1:
                print('***Your withdrawal was successful!***')
                print('===Going back to the main menu===')
                bankOperations()
        else:
            continue 
        
        
###Actual code to start application below. We are using init() because that's the function we wrote to start the program
init()